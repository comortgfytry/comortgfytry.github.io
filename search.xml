<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>过滤器</title>
      <link href="/pages/JavaWeb/%E8%BF%87%E6%BB%A4%E5%99%A8.html"/>
      <url>/pages/JavaWeb/%E8%BF%87%E6%BB%A4%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> --JavaWeb --过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术</title>
      <link href="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF.html"/>
      <url>/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF.html</url>
      
        <content type="html"><![CDATA[<h1 id="会话与会话跟踪"><a href="#会话与会话跟踪" class="headerlink" title="会话与会话跟踪"></a>会话与会话跟踪</h1><p>会话：用户通过浏览器持续与服务器建立连接，直到一方断开连接，会话结束。一次会话可以包含多次请求和响应  </p><p>会话跟踪：维护浏览器状态的方法。服务器识别多次请求是否来源于同一浏览器，从而在多次请求间共享数据</p><p>会话跟踪的技术：cookie，session，令牌</p><h1 id="会话跟踪技术的简单示例"><a href="#会话跟踪技术的简单示例" class="headerlink" title="会话跟踪技术的简单示例"></a>会话跟踪技术的简单示例</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>存储在浏览器中<br>请求头中包含：<strong>Cookie:xxx</strong>与之前响应包头中：<strong>Set-Cookie:xxx</strong>一致</p><p>设置与获取Cookie：分别在HttpServletResponse和HttpServletRequest中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line">    <span class="comment">// 设置cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/session/c1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addCoookie</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;bibibi&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/session/c2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getCookie</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            System.out.println(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检验：浏览器打开<strong><a href="http://localhost:8080/session/c1">http://localhost:8080/session/c1</a></strong>,再打开<strong><a href="http://localhost:8080/session/c2">http://localhost:8080/session/c2</a></strong></p><p>可以发现打开c1时响应头中：Set-Cookies<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image.png" alt="image"><br>可知，服务器会自动将cookies响应给浏览器</p><p>接下来打开c2页面，可以发现Cookies中添加了c1界面响应得到的cookie<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image1.png" alt="image2"><br>可知，浏览器会自动存储cookie，并自动将其添加到请求头中</p><ul><li>优点：http所支持，可以自动进行</li><li>缺点：<br>  移动端不可用<br>  存储于浏览器，不安全<br>  不能跨域（前后端必须在同一个域内）<blockquote><p>跨域的三个维度：协议，ip&#x2F;域名，端口</p></blockquote></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>存储在服务器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置session</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/session/s1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">   session.setAttribute(<span class="string">&quot;abab&quot;</span>,<span class="string">&quot;baba&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取session</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/session/s2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;abab&quot;</span>);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先浏览器访问<strong><a href="http://localhost:8080/session/s1">http://localhost:8080/session/s1</a></strong><br>可以发现请求头中多了一个JSESSIONID，代表浏览器对应session会话对象的id<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image3.png" alt="image3"><br>再在浏览器中访问<strong><a href="http://localhost:8080/session/s2">http://localhost:8080/session/s2</a></strong><br>可以发现请求头中同样带有该ID<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image4.png" alt="image4"><br>再看下控制台，发现打印了value，获取session内容成功<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image2.png" alt="image2"></p><ul><li>优点：数据存储在服务器端，安全</li><li>缺点：<br>  cookie的缺点（以cookie为底层）<br>  服务器集群环境下无法使用<br><img src="/pages/JavaWeb/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/image5.png" alt="image5"><br>当访问c1时，负载均衡服务器调配到服务器1，并在其上创建session，但是访问s2时，可能访问到服务器2，3。这时候拿不到session对象。</li></ul><h2 id="令牌（JWT）"><a href="#令牌（JWT）" class="headerlink" title="令牌（JWT）"></a>令牌（JWT）</h2><p>通信双方以json格式安全传输数据（可靠性由数字签名保证）。<br>在服务器生成后发送存储给浏览器，之后每次请求都携带令牌</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>header（头）: 记录令牌类型、签名算法</li><li>payload（有效载荷）：携带自定义信息、默认信息等</li><li>signature（签名）</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">creJWT</span><span class="params">(Map&lt;String, Object&gt; claims, String secret)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256,secret)<span class="comment">//设置签名算法</span></span><br><span class="line">            .setClaims(claims)</span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span>*<span class="number">1000</span>))</span><br><span class="line">            .compact();</span><br><span class="line">    <span class="keyword">return</span> jwt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt, String secret)</span> &#123;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            .setSigningKey(secret)</span><br><span class="line">            .parseClaimsJwt(jwt)</span><br><span class="line">            .getBody();</span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>后端生成jwt令牌在响应数据中返回给前端，前端每次请求都在请求头中携带jwt</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> --JavaWeb --会话技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接雨水</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E6%8E%A5%E9%9B%A8%E6%B0%B4.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E6%8E%A5%E9%9B%A8%E6%B0%B4.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><img src="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E6%8E%A5%E9%9B%A8%E6%B0%B4/image.png" alt="image"></p><p>输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li>可以发现从左向右，一直到最高柱子，填充后一直呈非递减状态，而从右向左，一直到最高柱子，填充后也一直呈非递减状态</li><li>所以我们可以遍历找到最高柱子（如果有多根，那么取最右侧的），然后分别从左向右，从右向左到最高柱子填充，填充前后相减。</li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="comment">// 找到最高柱子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i] &gt;= height[maxIndex]) maxIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] copy = height.clone();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 从左向右</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; maxIndex) &#123;</span><br><span class="line">            <span class="keyword">if</span>(copy[left] &gt; copy[left+<span class="number">1</span>]) &#123;</span><br><span class="line">                copy[left+<span class="number">1</span>] = copy[left];</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从右向左</span></span><br><span class="line">        <span class="keyword">while</span> (right &gt; maxIndex)&#123;</span><br><span class="line">            <span class="keyword">if</span> (copy[right] &gt; copy[right-<span class="number">1</span>]) &#123;</span><br><span class="line">                copy[right-<span class="number">1</span>] = copy[right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//填充前后相减</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += copy[i] - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><div> 输入：nums = [-1,0,1,2,-1,-4]  输出：[[-1,-1,2],[-1,0,1]]</div><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>三个数组合太多，可以先通过遍历，确定一个数，然后再确定另外两个数  </p></li><li><p>要注意的是排序后的数组，如 -4，-4，-2，-1，0，1，2，2，4，8<br>相同的数会连在一起，并且定位首个相同数后确定的其他两个数组合是最全的。<br>上面数组定位首个-4可以有的组合：[-4,-4,8],[-4,2,2],而第二个-4组合：[-4,2,2]。所以在遇到和前面相同的数时直接跳过避免重复。接下来的两个数也是要判定重复跳过。</p></li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">              List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right &lt; len - <span class="number">1</span> &amp;&amp; left &gt; i+<span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>] &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i],nums[left],nums[right]));</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。<br><img src="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image.jpg" alt="图"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li>看到这题第一时间想着用双重for循环寻找，但是这样时间超时</li><li>所以先假定x方向最长时，面积最大。然后在首尾设置指针。<br>可以发现如果移动代表长y轴的指针，由于容器高由短y轴决定，而容器宽减小，所以容量必然减小<br>但如果移动代表短y轴的指针，那么容量可能增大</li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = height.length - <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            res = height[i] &lt; height[j] ?</span><br><span class="line">                    Math.max(res, (j - i) * height[i++]) :</span><br><span class="line">                    Math.max(res, (j - i) * height[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫常见问题总结</title>
      <link href="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
      <url>/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬取频率过高，网站限制ip访问"><a href="#爬取频率过高，网站限制ip访问" class="headerlink" title="爬取频率过高，网站限制ip访问"></a>爬取频率过高，网站限制ip访问</h1><p>使用同一个ip进行数据爬取时，网站会检测是否为展示人类在进行访问(例如：验证码，图片操作，甚至直接禁止访问)</p><h2 id="解决方法一：设置爬取时间间隔"><a href="#解决方法一：设置爬取时间间隔" class="headerlink" title="解决方法一：设置爬取时间间隔"></a>解决方法一：设置爬取时间间隔</h2><p>最简单的解决办法是：</p><ul><li><p>强制等待<br>直接使用time.sleep()设置爬取间隔的时间，间隔时间也可以用random进行变化设置<br>但如果是selenium进行爬取，还有更好的方式。</p></li><li><p>显示等待</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"> </span><br><span class="line">locator = (By.ID, <span class="string">&quot;要等待的标签的ID&quot;</span>)   <span class="comment"># 这里也可以设置成其他属性：By.CLASS_NAME...</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显式等待：每隔一段时间检测一次，直到超过最大等待时间，报错</span></span><br><span class="line">WebDriverWait(driver, 最大等待时间，检测间隔时间).until(expected_conditions.presence_of_element_located(locator))</span><br></pre></td></tr></table></figure></li><li><p>隐式等待</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 隐式等待：设置一个最大等待时间。在该时间内，如果网页加载完成，就往下进行，否侧报超时加载</span></span><br><span class="line">driver.implicitly_wait(最大等待时间) </span><br><span class="line">driver.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;标签ID&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="解决方法二：设置IP池"><a href="#解决方法二：设置IP池" class="headerlink" title="解决方法二：设置IP池"></a>解决方法二：设置IP池</h2><p>这个需要去网上找。。。。</p><h1 id="爬取效率低"><a href="#爬取效率低" class="headerlink" title="爬取效率低"></a>爬取效率低</h1><p>普通爬虫都是单进程。如果爬取内容较多，可以使用分布式爬虫。<br>具体实现方式可以参考另一篇文章<a href="%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.html">点击跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动零</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>利用双指针，首先定位最左侧零位。在此之上，向右遍历找到首个非零位。</li><li>（改进）不用考虑0放的位置，只需要记录下一个非零数应该放的位置</li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; len; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[x] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (x ==len - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> x + <span class="number">1</span>; k &lt; len; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[k] != <span class="number">0</span>)&#123;</span><br><span class="line">                        nums[x] = nums[k];</span><br><span class="line">                        nums[k] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[j++] = nums[i];    <span class="comment">//注意这里是先把nums[i]的值赋给nums[j],然后j++</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j; k &lt; nums.length; k++)&#123;</span><br><span class="line">            nums[k] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长连续序列</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对数组排序后，创建一个hashmap。遍历数组，把map中没有的数作为key存入并计算当其作为末尾的长度</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line">HashMap&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashMap.containsKey(num)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (!hashMap.containsKey(num-<span class="number">1</span>)) hashMap.put(num,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> hashMap.put(num,hashMap.get(num-<span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Integer&gt; counts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(hashMap.values());</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(counts);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 哈希 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母异位词分组</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p><p>字母异位词 是由重新排列源单词的所有字母得到的一个新单词。</p><p>输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br>输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>思路一：将字符串排序之后异位词都一样，存入hashmap中</li><li>思路二：异位词所有的字母出现次数相同，用一个26数组记录每个字母出现次数，然后把数组拼接成String,作为键，值与思路1相同</li></ul><h1 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , List&lt;String&gt;&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">    <span class="type">char</span>[] tmp = strs[i].toCharArray();</span><br><span class="line">    Arrays.sort(tmp);</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tmp);</span><br><span class="line">    <span class="keyword">if</span> (!hashMap.containsKey(res)) hashMap.put(res, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">    hashMap.get(res).add(strs[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// values()获取到的集合是collection要转换一下</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hashMap.values());</span><br><span class="line"><span class="keyword">return</span> list;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 哈希 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html"/>
      <url>/pages/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>把数组存入哈希表。数组内容作为key；索引作为值</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">         HashMap&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(tmp))    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,hashMap.get(tmp)&#125;;</span><br><span class="line">            hashMap.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 哈希 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask入门使用</title>
      <link href="/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html"/>
      <url>/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<p>目标：通过使用flask框架实现对全国不用级别景区个数可视化统计</p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p><img src="/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image.png" alt="image"></p><p><a href="flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/%E5%90%84%E7%9C%81%E6%97%85%E6%B8%B8%E6%99%AF%E5%8C%BA%E6%95%B0A%E7%BA%A7%E6%99%AF%E5%8C%BA%E6%95%B0.xlsx">点击获取.xlsx文件</a></p><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image1.png" alt="image1"></p><blockquote><p>static存放静态文件；templates存放html文件；board.py启动网页服务；data获取数据</p></blockquote><h1 id="第一步：将表格数据存入数据库"><a href="#第一步：将表格数据存入数据库" class="headerlink" title="第一步：将表格数据存入数据库"></a>第一步：将表格数据存入数据库</h1><h2 id="将xlsx文件另存为csv"><a href="#将xlsx文件另存为csv" class="headerlink" title="将xlsx文件另存为csv"></a>将xlsx文件另存为csv</h2><p><img src="/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image2.png" alt="image2"></p><h2 id="如果是存入本地数据库"><a href="#如果是存入本地数据库" class="headerlink" title="如果是存入本地数据库"></a>如果是存入本地数据库</h2><p>终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p --local-infile</span><br></pre></td></tr></table></figure><blockquote><p>注意要加后缀，否则出现数据库获取本地数据权限不够的问题</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;C:/Users/shouw/Desktop/各省旅游景区数A级景区数.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> tour.spot_with_rank(<span class="keyword">year</span>,<span class="keyword">local</span>,level,num);</span><br></pre></td></tr></table></figure><h1 id="第二步：python连接数据库获取各级别景区数据"><a href="#第二步：python连接数据库获取各级别景区数据" class="headerlink" title="第二步：python连接数据库获取各级别景区数据"></a>第二步：python连接数据库获取各级别景区数据</h1><p>在service中创建一个spotCount.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataSE</span>():</span><br><span class="line">    <span class="comment"># 数据库连接</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        database=<span class="string">&#x27;tour&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    sql1 = <span class="string">&quot;select * from spot_with_rank where level = %s&quot;</span></span><br><span class="line">    leList = [<span class="string">&quot;1A级&quot;</span>, <span class="string">&quot;2A级&quot;</span>, <span class="string">&quot;3A级&quot;</span>, <span class="string">&quot;4A级&quot;</span>, <span class="string">&quot;5A级&quot;</span>]</span><br><span class="line">    num = []</span><br><span class="line">    <span class="keyword">for</span> le <span class="keyword">in</span> leList:</span><br><span class="line">        cursor.execute(sql1, le)</span><br><span class="line">        num.append(<span class="built_in">len</span>(cursor.fetchall()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h1 id="第三步：对数据封装"><a href="#第三步：对数据封装" class="headerlink" title="第三步：对数据封装"></a>第三步：对数据封装</h1><p>在data中创建data.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chart</span>():</span><br><span class="line">    num = dataSE()</span><br><span class="line">    tmp = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;分级统计&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;1A级景区&#x27;</span>+ <span class="built_in">str</span>(num[<span class="number">0</span>]),</span><br><span class="line">            <span class="string">&#x27;2A级景区&#x27;</span> + <span class="built_in">str</span>(num[<span class="number">1</span>]),</span><br><span class="line">            <span class="string">&#x27;3A级景区&#x27;</span> + <span class="built_in">str</span>(num[<span class="number">2</span>]),</span><br><span class="line">            <span class="string">&#x27;4A级景区&#x27;</span> + <span class="built_in">str</span>(num[<span class="number">3</span>]),</span><br><span class="line">            <span class="string">&#x27;5A级景区&#x27;</span> + <span class="built_in">str</span>(num[<span class="number">4</span>]),</span><br><span class="line">        ]&#125;</span><br><span class="line">    echart = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: tmp.get(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;A1&#x27;</span>: tmp.get(<span class="string">&#x27;data&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">        <span class="string">&#x27;A2&#x27;</span>: tmp.get(<span class="string">&#x27;data&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">        <span class="string">&#x27;A3&#x27;</span>: tmp.get(<span class="string">&#x27;data&#x27;</span>)[<span class="number">2</span>],</span><br><span class="line">        <span class="string">&#x27;A4&#x27;</span>: tmp.get(<span class="string">&#x27;data&#x27;</span>)[<span class="number">3</span>],</span><br><span class="line">        <span class="string">&#x27;A5&#x27;</span>: tmp.get(<span class="string">&#x27;data&#x27;</span>)[<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> echart</span><br></pre></td></tr></table></figure><h1 id="第四步：html页面"><a href="#第四步：html页面" class="headerlink" title="第四步：html页面"></a>第四步：html页面</h1><p>在templates中新建index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>景点级别统计<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;A1&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;A2&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;A3&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;A4&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;A5&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第五步：falsk服务"><a href="#第五步：falsk服务" class="headerlink" title="第五步：falsk服务"></a>第五步：falsk服务</h1><p>创建board.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data.data <span class="keyword">import</span> chart</span><br><span class="line"><span class="keyword">from</span> service.spotCount <span class="keyword">import</span> dataSE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个flask服务</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    context = chart()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, **context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">4005</span>)</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="/pages/flask%E6%A1%86%E6%9E%B6/flask%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image3.png" alt="image3"></p>]]></content>
      
      
      <categories>
          
          <category> flask框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> flask框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫二：动态网页的爬取</title>
      <link href="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96.html"/>
      <url>/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h1><p>动态网页的数据不会出现在页面的源代码中<br>比如说马蜂窝网的自由行页面（<a href="https://www.mafengwo.cn/sales/0--M10030P%E6%B5%B7%E5%8D%97-0-0-0-0-0.html%EF%BC%89">https://www.mafengwo.cn/sales/0--M10030P%E6%B5%B7%E5%8D%97-0-0-0-0-0.html）</a></p><ul><li>页面<br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image.png" alt="image">   </li><li>其中活动列表的页面源码</li></ul><p><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image1.png" alt="image1"></p><ul><li>渲染后页面</li></ul><p><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image2.png" alt="iamge2"></p><p>可以发现渲染前数据是没有的，如果我们像爬取静态网页一样爬取，那么只能得到未渲染的html结构</p><h1 id="爬取方法一（selenium模拟浏览器）"><a href="#爬取方法一（selenium模拟浏览器）" class="headerlink" title="爬取方法一（selenium模拟浏览器）"></a>爬取方法一（selenium模拟浏览器）</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>安装selenium</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><ul><li>安装谷歌浏览器</li><li>安装chromedriver</li></ul><blockquote><p>注意查看自己谷歌浏览器版本，然后下载对应（大版本相同即可）的chromedriver<br>链接：<a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">https://registry.npmmirror.com/binary.html?path=chromedriver/</a><br>解压后将其放到Python安装路径下  </p></blockquote><h2 id="实现（爬取动态页面内容-虚拟点击翻页）"><a href="#实现（爬取动态页面内容-虚拟点击翻页）" class="headerlink" title="实现（爬取动态页面内容 + 虚拟点击翻页）"></a>实现（爬取动态页面内容 + 虚拟点击翻页）</h2><ul><li>目标：爬取三亚自由行（<a href="https://www.mafengwo.cn/sales/0--M10030P%E6%B5%B7%E5%8D%97-0-0-0-0-0.html%EF%BC%89%E7%9A%84%E7%AC%AC%E5%89%8D6%E9%A1%B5%E6%B4%BB%E5%8A%A8">https://www.mafengwo.cn/sales/0--M10030P%E6%B5%B7%E5%8D%97-0-0-0-0-0.html）的第前6页活动</a></li></ul><h3 id="获取渲染后的页面"><a href="#获取渲染后的页面" class="headerlink" title="获取渲染后的页面"></a>获取渲染后的页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(url1)</span><br></pre></td></tr></table></figure><h3 id="定位爬取内容的方法"><a href="#定位爬取内容的方法" class="headerlink" title="定位爬取内容的方法"></a>定位爬取内容的方法</h3><h4 id="F12打开页面元素如图获取xpath"><a href="#F12打开页面元素如图获取xpath" class="headerlink" title="F12打开页面元素如图获取xpath"></a>F12打开页面元素如图获取xpath</h4><p><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image3.png" alt="image3"></p><h4 id="获取元素中想要的部分"><a href="#获取元素中想要的部分" class="headerlink" title="获取元素中想要的部分"></a>获取元素中想要的部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = browser.find_element_by_xpath(<span class="string">&#x27;xpath&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="进一步获取"><a href="#进一步获取" class="headerlink" title="进一步获取"></a>进一步获取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.get_property(属性) <span class="comment"># 获取属性的内容</span></span><br></pre></td></tr></table></figure><p>使用：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;/sales/21023.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.get_property(<span class="string">&#x27;href&#x27;</span>) <span class="comment"># 获取了&lt;a&gt;标签中的链接&quot;/sales/21023.html&quot;</span></span><br></pre></td></tr></table></figure><p> <br>————————————————————————– <br> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.text <span class="comment"># 获取标签的内容</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element:<span class="tag">&lt;<span class="name">a</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.text <span class="comment"># 得到hello</span></span><br></pre></td></tr></table></figure><p> <br>————————————————————————– <br> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.find_element_by_link_text(标签内容) <span class="comment">#根据标签内容获取标签（反过来）</span></span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pi pg-next&quot;</span>&gt;</span>Next&gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_page = element.find_element_by_link_text(<span class="string">&#x27;Next&gt;&gt;&#x27;</span>) <span class="comment"># 得到标签，可以模拟其功能。这里是一个跳转到下一页的标签，所以可以调用click()模拟跳转</span></span><br><span class="line">next_page.click()</span><br></pre></td></tr></table></figure><p> <br>————————————————————————– <br> </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.find_element_by_class_name(<span class="keyword">class</span>属性内容)</span><br></pre></td></tr></table></figure><p> 经常使用</p><p>当然还有许多方法，这里不多叙述</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>输入某城市自由行页面第一页链接即可爬取6页活动（example：’<a href="https://www.mafengwo.cn/sales/0-10320-M14674-0-0-0-0-0.html?group=1&seid=23F35AC5-65E0-4048-8F1B-4677F6B87E7A%27%EF%BC%89">https://www.mafengwo.cn/sales/0-10320-M14674-0-0-0-0-0.html?group=1&amp;seid=23F35AC5-65E0-4048-8F1B-4677F6B87E7A&#39;）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;某城市自由行页面链接：&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(url)</span><br><span class="line">locator = (By.LINK_TEXT, <span class="string">&#x27;Next&gt;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">WebDriverWait(browser, <span class="number">16</span>).until(expected_conditions.presence_of_element_located(locator))</span><br><span class="line"></span><br><span class="line">htmls = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;activities.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="comment"># 获取每个活动的网页链接</span></span><br><span class="line">    <span class="keyword">for</span> aTag <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">        element = browser.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div[2]/div[4]/a[&#x27;</span> + <span class="built_in">str</span>(aTag) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        htmls.append(element.get_property(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(htmls)</span></span><br><span class="line">    <span class="comment"># 获取活动的html</span></span><br><span class="line">    <span class="comment"># https://www.mafengwo.cn/sales/2295490.html</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> htmls:</span><br><span class="line">        response = requests.get(url, headers=headers);</span><br><span class="line">        html = response.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        tmp = soup.find(name=<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;sales-title&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="literal">None</span>:</span><br><span class="line">            tmp = tmp.find(name=<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> tmp != <span class="literal">None</span>:</span><br><span class="line">                service = tmp.text</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                service = <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            service = <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(service)</span><br><span class="line">        tmp = soup.find(name=<span class="string">&#x27;strong&#x27;</span>, class_=<span class="string">&#x27;js_dingzhi_price&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="literal">None</span>:</span><br><span class="line">            price = tmp.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            price = <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(price)</span><br><span class="line">        tmp = soup.find(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;soldout&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="literal">None</span>:</span><br><span class="line">            sold = tmp.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sold = <span class="string">&#x27;***&#x27;</span></span><br><span class="line"></span><br><span class="line">        activity = service + <span class="string">&#x27;,&#x27;</span> + price + <span class="string">&#x27;,&#x27;</span> + sold</span><br><span class="line">        f.write(activity)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 实现虚拟点击</span></span><br><span class="line">    next_page = browser.find_element_by_link_text(<span class="string">&#x27;Next&gt;&gt;&#x27;</span>)</span><br><span class="line">    next_page.click()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h1 id="爬取方法二（通过javsript逆向获取数据接口）"><a href="#爬取方法二（通过javsript逆向获取数据接口）" class="headerlink" title="爬取方法二（通过javsript逆向获取数据接口）"></a>爬取方法二（通过javsript逆向获取数据接口）</h1><p>基本方法：在需要爬取网页F12选择网络，选择XHR,点击名称，选择预览。依次查看预览，找到想要爬取的内容，再切换到标头，找到请求url（真实需要爬取的链接），用该链接爬取预览中的内容（大部分是json）<br>好处：比selenium效率更高</p><h2 id="爬取今日头条的头条热榜（https-www-toutiao-com-）"><a href="#爬取今日头条的头条热榜（https-www-toutiao-com-）" class="headerlink" title="爬取今日头条的头条热榜（https://www.toutiao.com/）"></a>爬取今日头条的头条热榜（<a href="https://www.toutiao.com/%EF%BC%89">https://www.toutiao.com/）</a></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image6.png" alt="image6"><br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image4.png" alt="image4"><br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image5.png" alt="image5"></p><p>可以发现头条热榜中内容是json格式</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc&amp;_signature=_02B4Z6wo00f01cm1l.wAAIDAPMp9YrQAl5HJkZNAABbSIRLm0FZII5tPd8u2PIsOqj1YucYIEdGWkcDPpbZOxzsho28lefSfMc0QiN1YHh9hAjgdADwz4lHocFqMV1YF3n8um5OwWNJj77DX16&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">json = response.json()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(json[<span class="string">&#x27;data&#x27;</span>])):</span><br><span class="line">    <span class="built_in">print</span>(json[<span class="string">&#x27;data&#x27;</span>][i][<span class="string">&#x27;Title&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="爬取马蜂窝网自由行列表（https-www-mafengwo-cn-sales-0-0-M10030-0-0-0-0-0-html）"><a href="#爬取马蜂窝网自由行列表（https-www-mafengwo-cn-sales-0-0-M10030-0-0-0-0-0-html）" class="headerlink" title="爬取马蜂窝网自由行列表（https://www.mafengwo.cn/sales/0-0-M10030-0-0-0-0-0.html）"></a>爬取马蜂窝网自由行列表（<a href="https://www.mafengwo.cn/sales/0-0-M10030-0-0-0-0-0.html%EF%BC%89">https://www.mafengwo.cn/sales/0-0-M10030-0-0-0-0-0.html）</a></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image7.png" alt="image7"><br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image8.png" alt="image8"><br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BA%8C%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image9.png" alt="image9"></p><p>可以发现这个页面全部把数据存到了html中</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.mafengwo.cn/sales/ajax_2017.php?act=GetContentList&amp;s_dept_time%5B%5D=all&amp;price%5B%5D=all&amp;from=NaN&amp;kw=&amp;to=M10030&amp;salesType=NaN&amp;page=1&amp;group=1&amp;sort=smart&amp;sort_type=desc&amp;limit=20&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">json = response.json()</span><br><span class="line">html = json[<span class="string">&#x27;html&#x27;</span>]</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> h3 <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;h3&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(h3.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时如果需要翻页，可以发现每一页的链接发生变化，使用了page&#x3D;x来表示第x页。所以创建循环拼接链接就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫一：简单静态网页的爬取</title>
      <link href="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%80%EF%BC%9A%E7%AE%80%E5%8D%95%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96.html"/>
      <url>/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%80%EF%BC%9A%E7%AE%80%E5%8D%95%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>利用Request库发起请求，得到响应数据；利用BeautifulSoup解析数据，进而获取页面标签中我们所需要的数据</p><h1 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h1><p>爬取网页内容静态呈现</p><h1 id="使用技术介绍"><a href="#使用技术介绍" class="headerlink" title="使用技术介绍"></a>使用技术介绍</h1><h2 id="Request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h2><ul><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure></li><li>检验安装成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python </span><br><span class="line">import requests</span><br></pre></td></tr></table></figure>查询结果如下<br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%80%EF%BC%9A%E7%AE%80%E5%8D%95%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image.png" alt="image"> </li><li>常用方法</li></ul><table><thead><tr><th align="left">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">rquest()</td><td align="left"><div>最基本的方法，是之后应对不同请求方法的基本方法</div><div>用get()举例：</div><div><code>def get(url, params=None, **kwargs):return request(&quot;get&quot;, url, params=params, **kwargs)</code></div></td></tr><tr><td align="left">get()</td><td align="left">对应http中get方法</td></tr><tr><td align="left">post()</td><td align="left">对应http中post方法</td></tr><tr><td align="left">head()</td><td align="left">对应http中head方法</td></tr><tr><td align="left">put()</td><td align="left">对应http中put方法</td></tr><tr><td align="left">patch()</td><td align="left">对应http中patch方法</td></tr><tr><td align="left">get()</td><td align="left">对应http中delete方法</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><p>传入参数：</p><table><thead><tr><th align="left">request()</th></tr></thead><tbody><tr><td align="left">method:http请求类型（<code>GET</code>, <code>OPTIONS</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, or <code>DELETE</code>）</td></tr><tr><td align="left">url:网页链接</td></tr><tr><td align="left">header:请求头，模拟正常请求时会发送的一些必要内容（<strong>详情见注解1</strong>）</td></tr><tr><td align="left">proxies:用来设置代理服务器（<strong>详情见注解2</strong>）</td></tr><tr><td align="left">timeout：设置超时（<strong>详情见注解3</strong>）</td></tr><tr><td align="left"></td></tr></tbody></table><p>其他方法以request()为支撑省略了method，其他参数一样</p><blockquote><p>注解</p></blockquote><blockquote><p>注解1：网页请求报文模板如下:<br><img src="/pages/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%80%EF%BC%9A%E7%AE%80%E5%8D%95%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/image1.png" alt="image1"><br>将其中数据成用字典封装  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;headers = &#123;</span><br><span class="line">       <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.9 Safari/537.36&quot;</span>    &#125;</span><br></pre></td></tr></table></figure><p>一般说添加<strong>user-agent</strong>就可以了  </p></blockquote><blockquote><p>注解2：可以用proxies来切换发送请求的ip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>, <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>, &#125;</span><br></pre></td></tr></table></figure><p>这样做的好处是不会因为爬虫频繁请求网页导致网站限制ip访问</p></blockquote><blockquote><p>注解3：用于限制接受响应的最大时间，超出则会报错，默认为不限时<br>也可以传入一个元组<code>r = requests.get(&#39;https://www.taobao.com&#39;,timeout=(5,30))</code><br>分别代表连接时间和读取时间</p></blockquote><h2 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h2><ul><li>选择解析器解析指定内容</li></ul><p>基本格式：<code>soup = BeautifulSoup(解析内容, 解析器)</code></p><p>常用解析器：lxml, html(默认), xml…</p><blockquote><p>注意：如果是标准正确的html内容，不同解析器解析结果相同；反之，会有不同</p></blockquote><ul><li>处理解析数据的方法</li></ul><table><thead><tr><th align="left">方法</th><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">find()</td><td align="left">name,class_</td><td align="left">查找HTML中第一个为类型为name，class为class_的标签</td></tr><tr><td align="left">find_all()</td><td align="left">name,class_</td><td align="left">返回装有所有符合name，class的标签列表</td></tr><tr><td align="left">text</td><td align="left">~</td><td align="left">获取标签中内容</td></tr></tbody></table><ul><li>网页中定位所要查找的内容</li></ul><p>F12开发者工具 + 选中网页内容，右键检查</p><h1 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h1><ul><li><p>目标：爬取<strong>去哪儿旅行网</strong>的不同省份的热门城市和景点数据（<a href="http://travel.qunar.com/p-sf297555-%7B%E7%9C%81%E4%BB%BD%E7%9A%84%E6%8B%BC%E9%9F%B3%E5%B0%8F%E5%86%99%7D%EF%BC%89">http://travel.qunar.com/p-sf297555-{省份的拼音小写}）</a></p></li><li><p>输入省份，获取该省的页面，爬取热门城市</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_soup_province</span>():</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询省份的去哪儿旅行网站链接：\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 请求头 浏览器类型</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.9 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers);</span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> soup</span><br><span class="line"></span><br><span class="line">province =  <span class="built_in">input</span>(<span class="string">&#x27;请输入省份：\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取输入省份的主要城市的url（每个省6个）</span></span><br><span class="line">soup = get_soup_province()</span><br><span class="line">cityMap = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;sub_item&#x27;</span>):</span><br><span class="line">    city = li.a[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">    url = li.a[<span class="string">&quot;href&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;旅游景点&#x27;</span> <span class="keyword">in</span> city:</span><br><span class="line">        cityMap[city] = url</span><br></pre></td></tr></table></figure><p>此时该省份下的最热门6个城市及其页面链接已经存入cityMap字典中</p><ul><li>继续爬取6个热门城市的页面，获取其各自的前30景区信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">city = [] <span class="comment"># 景区归属城市</span></span><br><span class="line">spotName = [] <span class="comment"># 景点名称</span></span><br><span class="line">score = []  <span class="comment"># 景点满意度</span></span><br><span class="line">ranking = []  <span class="comment"># 排名</span></span><br><span class="line">comments = [] <span class="comment"># 简介</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> cityMap:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):   <span class="comment"># 每个城市爬取前30的景区   </span></span><br><span class="line">        <span class="comment"># url拼接：到达城市景点不同页数 http://travel.qunar.com/p-cs299782-xiamen-jingdian-1-2</span></span><br><span class="line">        tmp = cityMap[key] + <span class="string">&#x27;-1-&#x27;</span></span><br><span class="line">        url = tmp + <span class="built_in">str</span>(i) <span class="comment"># i 可以说代表页数</span></span><br><span class="line">        soup = get_soup_url(url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 景点名称</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;cn_tit&#x27;</span>):</span><br><span class="line">            city.append(key)</span><br><span class="line">            spotName.append(span.text)</span><br><span class="line">        <span class="built_in">print</span>(spotName)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评分（满意度）</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;cur_star&#x27;</span>):</span><br><span class="line">                percent = span[<span class="string">&#x27;style&#x27;</span>]</span><br><span class="line">                tmp = <span class="built_in">str</span>(percent).split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                score.append(tmp)</span><br><span class="line">        <span class="built_in">print</span>(score)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 排名</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;ranking_sum&#x27;</span>):</span><br><span class="line">                ranking.append(span.text)</span><br><span class="line">        <span class="built_in">print</span>(ranking)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 简介</span></span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;desbox&#x27;</span>):</span><br><span class="line">                comments.append(div.text)</span><br><span class="line">        <span class="built_in">print</span>(comments)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取每个景点需要的信息</span></span><br><span class="line"><span class="built_in">map</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;所在城市&#x27;</span>:city,</span><br><span class="line">    <span class="string">&#x27;景点名称&#x27;</span>: spotName,</span><br><span class="line">    <span class="string">&#x27;满意度&#x27;</span>: score,</span><br><span class="line">    <span class="string">&#x27;排名&#x27;</span>: ranking,</span><br><span class="line">    <span class="string">&#x27;简介&#x27;</span>: comments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时该省景区信息已经存入map字典中</p><ul><li>存入数据库或者excel表格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># excel表格</span></span><br><span class="line">df = pd.DataFrame(<span class="built_in">map</span>)</span><br><span class="line">df.to_excel(province + <span class="string">&quot;.xlsx&quot;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库</span></span><br><span class="line"><span class="comment"># 数据库连接</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    database=<span class="string">&#x27;mw&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到数据库</span></span><br><span class="line">sql = <span class="string">&quot;insert into tour (city, spotName, score, ranking, comments) values(%s，%s，%s，%s，%s)&quot;</span></span><br><span class="line"><span class="keyword">for</span> lt <span class="keyword">in</span> lst:</span><br><span class="line">    col1 = city.pop()</span><br><span class="line">    col2 = spotName.pop()</span><br><span class="line">    col3 = score.pop()</span><br><span class="line">    col4 = ranking.pop()</span><br><span class="line">    col5 = comments.pop()</span><br><span class="line">    insert = cursor.execute(sql, (col1, col2, col3, col4, col5))</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>完整代码  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;https://travel.qunar.com/p-sf298098-fujian&#x27;</span></span><br><span class="line"><span class="comment"># 爬取省份下城市soup</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_soup_province</span>():</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询省份的去哪儿旅行网站链接：\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 请求头 浏览器类型</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.9 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers);</span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> soup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取城市下景点soup</span></span><br><span class="line"><span class="comment"># 爬取景点内容soup</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_soup_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 请求头 浏览器类型</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.9 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers);</span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> soup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">province =  <span class="built_in">input</span>(<span class="string">&#x27;请输入省份：\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取输入省份的主要城市的url（每个省6个）</span></span><br><span class="line">soup = get_soup_province()</span><br><span class="line">cityMap = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;sub_item&#x27;</span>):</span><br><span class="line">    city = li.a[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">    url = li.a[<span class="string">&quot;href&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;旅游景点&#x27;</span> <span class="keyword">in</span> city:</span><br><span class="line">        cityMap[city] = url</span><br><span class="line"><span class="comment"># print(cityMap)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取各城市的景点链接（按人气排名前百的城市）</span></span><br><span class="line">city = []</span><br><span class="line">spotName = []</span><br><span class="line">score = []</span><br><span class="line">ranking = []</span><br><span class="line">comments = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> cityMap:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):   </span><br><span class="line">        <span class="comment"># url拼接：到达城市景点不同页数 http://travel.qunar.com/p-cs299782-xiamen-jingdian-1-2</span></span><br><span class="line">        tmp = cityMap[key] + <span class="string">&#x27;-1-&#x27;</span></span><br><span class="line">        url = tmp + <span class="built_in">str</span>(i)</span><br><span class="line">        soup = get_soup_url(url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 景点名称</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;cn_tit&#x27;</span>):</span><br><span class="line">            city.append(key)</span><br><span class="line">            spotName.append(span.text)</span><br><span class="line">        <span class="built_in">print</span>(spotName)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评分（满意度）</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;cur_star&#x27;</span>):</span><br><span class="line">                percent = span[<span class="string">&#x27;style&#x27;</span>]</span><br><span class="line">                tmp = <span class="built_in">str</span>(percent).split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                score.append(tmp)</span><br><span class="line">        <span class="built_in">print</span>(score)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 排名</span></span><br><span class="line">        <span class="keyword">for</span> span <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;ranking_sum&#x27;</span>):</span><br><span class="line">                ranking.append(span.text)</span><br><span class="line">        <span class="built_in">print</span>(ranking)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 简介</span></span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;desbox&#x27;</span>):</span><br><span class="line">                comments.append(div.text)</span><br><span class="line">        <span class="built_in">print</span>(comments)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取每个景点需要的信息</span></span><br><span class="line"><span class="built_in">map</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;所在城市&#x27;</span>:city,</span><br><span class="line">    <span class="string">&#x27;景点名称&#x27;</span>: spotName,</span><br><span class="line">    <span class="string">&#x27;满意度&#x27;</span>: score,</span><br><span class="line">    <span class="string">&#x27;排名&#x27;</span>: ranking,</span><br><span class="line">    <span class="string">&#x27;简介&#x27;</span>: comments</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(<span class="built_in">map</span>)</span><br><span class="line">df.to_excel(province + <span class="string">&quot;.xlsx&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式爬虫</title>
      <link href="/pages/%E7%88%AC%E8%99%AB/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.html"/>
      <url>/pages/%E7%88%AC%E8%99%AB/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.html</url>
      
        <content type="html"><![CDATA[<h1 id="认识分布式爬虫"><a href="#认识分布式爬虫" class="headerlink" title="认识分布式爬虫"></a>认识分布式爬虫</h1><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>1、生产端和消费端的隔离<br>2、同一端的worker之间隔离</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>存储要爬取的网页url，便于生产端产出，消费端获取（一次一个）<br>避免重复爬取 </p><ul><li>使用redis队列做消息队列<blockquote><p>最基本方法：生产者通过lpush存入，消费者通过rpop从队列中获取</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 生产端</span></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;17.0.0.1&#x27;</span>, port=<span class="number">1111</span>,password=<span class="string">&#x27;pwd&#x27;</span>,db=name)</span><br><span class="line"><span class="comment"># 产生</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    r.lpush(<span class="string">&#x27;url_queue&#x27;</span>,i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 消费端</span></span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>,</span><br><span class="line">                password=<span class="string">&#x27;yourpassword&#x27;</span>, db=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">task</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取url &#123;task&#125;&#x27;</span>.<span class="built_in">format</span>(task=task))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    task = r.rpop(<span class="string">&#x27;url_queue&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> task:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    crawl(task)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
